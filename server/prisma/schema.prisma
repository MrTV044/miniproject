// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ORGANIZER
  CUSTOMER
  ADMIN
}

enum Genre {
  ROCK
  JAZZ
  POP
  INDIE
  EDM
  HIP_HOP @map("HIP-HOP")
}

enum EventType {
  PAID
  FREE
}

model User {
  id         Int        @id @default(autoincrement())
  fullname   String
  email      String     @unique
  password   String
  role       Role?
  referral   String?    @unique
  Coupon     Coupon[]
  Event      Event[]
  Order      Order[]
  created_at DateTime   @default(now())
  FeedBack   FeedBack[]
  Wallet     Wallet?
  Points     Points?
}

model Order {
  id          Int      @id @default(autoincrement())
  totalPrice  Int
  totalTicket Int
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  eventId     Int
  event       Event    @relation(fields: [eventId], references: [id])
  Ticket      Ticket[]
}

model Event {
  id          Int       @id @default(autoincrement())
  image       String
  name        String
  genre       String
  date        DateTime
  place       String
  ticketSlot  Int
  ticketSold  Int       @default(0)
  prices      Decimal
  eventType   EventType
  description String
  organizer   String
  organizerId Int?

  Organizer User?      @relation(fields: [organizerId], references: [id])
  Order     Order[]
  Voucher   Voucher[]
  Feedback  FeedBack[]
}

model Ticket {
  id          Int      @id @default(autoincrement())
  ticketCode  String   @unique // Menggunakan String jika kode tiket bisa berupa huruf dan angka
  ticketTotal Decimal
  orderId     Int
  createdAt   DateTime @default(now())
  Order       Order    @relation(fields: [orderId], references: [id])
}

model Voucher {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Int
  stock       Int      @default(10)
  expiredDate DateTime
  eventId     Int

  Event Event @relation(fields: [eventId], references: [id])
}

model Coupon {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  discount       Int      @default(10)
  used           Boolean  @default(false)
  userId         Int
  expirationDate DateTime

  User User @relation(fields: [userId], references: [id])
}

model Points {
  id      Int  @id @default(autoincrement())
  balance Int  @default(0)
  // expirationDate DateTime
  userId  Int  @unique
  User    User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeedBack {
  id        Int      @id @default(autoincrement())
  review    String
  rating    Int
  createdAt DateTime @default(now())
  eventId   Int
  userId    Int

  Event Event @relation(fields: [eventId], references: [id])
  User  User  @relation(fields: [userId], references: [id])
}

model Wallet {
  id      Int     @id @default(autoincrement())
  balance Decimal @default(0)
  userId  Int     @unique

  User User @relation(fields: [userId], references: [id])
}
